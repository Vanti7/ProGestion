name: Release One-Click

on:
  workflow_dispatch:
    inputs:
      level:
        description: 'Type de version (patch/minor/major) ou X.Y.Z'
        required: true
        default: 'patch'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout dev
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
      - name: Compute next version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          LEVEL="${{ github.event.inputs.level }}"
          cur=$(cat VERSION 2>/dev/null || echo "0.0.0")
          inc() { IFS='.' read -r M m p <<<"$1"; case "$2" in major) M=$((M+1)); m=0; p=0;; minor) m=$((m+1)); p=0;; patch) p=$((p+1));; *) echo "invalid"; return 1;; esac; echo "${M}.${m}.${p}"; }
          if [[ "$LEVEL" =~ ^(patch|minor|major)$ ]]; then
            new=$(inc "$cur" "$LEVEL")
          elif [[ "$LEVEL" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            new="$LEVEL"
          else
            echo "Invalid level: $LEVEL" >&2; exit 1
          fi
          echo "version=$new" >> $GITHUB_OUTPUT
      - name: Create release branch
        run: |
          ver=${{ steps.ver.outputs.version }}
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          git checkout -b "release/${ver}"
      - name: Bump version (prepare only)
        run: |
          ver=${{ steps.ver.outputs.version }}
          chmod +x scripts/release.sh
          ./scripts/release.sh "$ver" --prepare
      - name: Merge release -> master and tag
        run: |
          ver=${{ steps.ver.outputs.version }}
          git fetch origin master
          git checkout master
          git merge --no-ff "origin/release/${ver}" -m "Release v${ver}"
          git push origin master
          git tag -a "v${ver}" -m "Release v${ver}"
          git push origin "v${ver}"
      - name: Sync back master -> dev
        run: |
          git fetch origin dev
          git checkout dev
          git merge --no-ff origin/master -m "Sync master into dev after release"
          git push origin dev
      - name: Cleanup release branch (remote)
        run: |
          ver=${{ steps.ver.outputs.version }}
          git push origin --delete "release/${ver}" || true


